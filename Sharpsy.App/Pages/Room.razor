@using Sharpsy.Library.Models
@using Sharpsy.DataAccess.Stores
@using Sharpsy.App.Components
@using Sharpsy.App.Services
@page "/room/{roomId:int}"
@inject IStorage RoomStore
@inject State State

@if (RoomModel == null)
{
    <p>not found</p>
}
else if (!IsAuthorizedUser)
{
    <NotAuthorized></NotAuthorized>
}
else
{
    
<div style="background-color:firebrick; width:100%; height:100vh;">


    <div style="width: 82%; margin: auto;padding-top:2rem;padding-bottom:2rem;height:100vh">
        <div style="height:100%;width:32%;background-color:#fff;float:left">
            test
        </div>
        <div style="float:right;width:65%;float:right">
            <div style="height:82vh;background-color:#fff;padding-top: 1rem;overflow-y:auto;margin-bottom:2rem">
                @if (RoomModel.Messages != null)
                {
                    foreach (var message in RoomModel.Messages)
                    {
                        <div style="padding-left:1.5rem; padding-right:1.5rem">
                            <p>@message.Text</p>
                        </div>
                        <hr />
                    }
                }
            </div>
            <div style="bottom:30px;width:100%;float:right">
                <textarea @bind="MessageText" @bind:event="oninput" rows="3" style="width:100%;resize: none;" @onkeydown="@Enter"></textarea>
            </div>
        </div>
    </div>



</div>
}
@code {

    [Parameter]
    public int roomId { get; set; }

    public RoomModel RoomModel { get; set; }

    public ApplicationUser User { get; set; }

    public bool IsAuthorizedUser { get; set; }

    private string MessageText;

    private int Page = 0;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        RoomModel = await RoomStore.FindRoomById(roomId);
        if (RoomModel == null)
            return;

        User = await State.GetAuthenticatedUser();
        IsAuthorizedUser = User == null
            ? false
            : await RoomStore.IsUserInRoom(User.Id, roomId);

        if (!IsAuthorizedUser)
            return;

        RoomModel.Messages = await RoomStore.GetMessagePageInRoom(roomId, Page);
    }

    public async Task Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            if (!string.IsNullOrEmpty(MessageText))
            {
                var message = new Message
                {
                    Text = MessageText,
                    UserId = User.Id,
                    RoomId = roomId
                };

                var res = await RoomStore.InsertMessage(message);
                if (res != 0)
                {
                    MessageText = "";
                    Page = 0;
                    RoomModel.Messages = await RoomStore.GetMessagePageInRoom(roomId, Page);
                }


            }
        }
    }
}
