@using Sharpsy.Library.Models
@using Sharpsy.DataAccess.Stores
@using Sharpsy.App.Services
@using Sharpsy.Library.Services
@using Microsoft.AspNetCore.Identity
@using Sharpsy.App.Components 
@page "/{roomId:int}/invite"
@inject IStorage RoomStore
@inject UserManager<ApplicationUser> UserManager
@inject State State
@inject MailerService MailerService
@inject NavigationManager NavigationManager


@if (!IsAuthorizedUser)
{
    <NotAuthorized></NotAuthorized>
}
else
{
    <h3>invite</h3>

    <EditForm Model="@roomInvitationModel" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <InputText id="Email" @bind-Value="roomInvitationModel.ReciverEmail" />

        <button type="submit">Submit</button>
    </EditForm>

    <p class="error">
        @Error
    </p>
}

@code {
    [Parameter] public int roomId { get; set; }

    private RoomInvitationModel roomInvitationModel = new RoomInvitationModel();

    public string Error;

    public bool IsAuthorizedUser { get; set; }

    public ApplicationUser User { get; set; }
    protected override async Task OnInitializedAsync()
    {
        base.OnInitializedAsync();
        User = await State.GetAuthenticatedUser();
        IsAuthorizedUser = User == null
            ? false
            : await RoomStore.IsUserInRoom(User.Id, roomId);
        return;
    }

    private async Task HandleValidSubmit()
    {
        var user = await State.GetAuthenticatedUser();
        roomInvitationModel.SenderUserId = user.Id;
        roomInvitationModel.InvitationGUID = Guid.NewGuid().ToString();
        roomInvitationModel.RoomId = roomId;
        roomInvitationModel.InvitationUrl = NavigationManager.BaseUri + "/invitation/" + roomInvitationModel.InvitationGUID;

        var invitedUser = await UserManager.FindByEmailAsync(roomInvitationModel.ReciverEmail);
        if (invitedUser != null) //user doest exists
        {

            if (invitedUser.Id == user.Id)
            {
                Error = "You can not invite yourself";
                StateHasChanged();
                return;
            }

            var isUserAllreadyInRoom = await RoomStore.IsUserInRoom(invitedUser.Id, roomInvitationModel.RoomId);
            if (isUserAllreadyInRoom)
            {
                Error = "The user is allready a member in the room";
                StateHasChanged();
                return;
            }
        }

        var succesfull = await RoomStore.InsertInvitation(roomInvitationModel);
        if (!succesfull)
            return;

        MailerService.SendRoomInvitation(roomInvitationModel);

    }
}
