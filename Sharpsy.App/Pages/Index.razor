@page "/"
@using System.Text
@using Sharpsy.Library.Models
@using System.Text.Json
@using System.Security.Claims
@using Sharpsy.DataAccess.Stores
@using Sharpsy.App.Services
@using Sharpsy.App.Components
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IStorage RoomStore
@inject UserManager<ApplicationUser> UserManager
@inject State State

<style>
    .bacground {
        background-image: linear-gradient(to bottom right, #2d56bd, #429aff);
        width: 100%;
        height: 100vh;
    }

    .custom-container {
        width: 82%;
        margin: auto;
        padding-top: 2rem;
        padding-bottom: 2rem;
        height: 100vh
    }

    .container-shadow {
        box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;
    }
    ::-webkit-scrollbar-track {
        background-color: transparent;
    }

    ::-webkit-scrollbar {
        width: 5px;
        background-color: transparent;
    }

    ::-webkit-scrollbar-thumb {
        background-image: linear-gradient(#3776DC, #3A7EE4);
    }

    .roomlist-item {
        cursor: pointer;
        font-size: larger;
    }

    .roomlist-item-active {
        color: #2D56BD
    }

    #roomlist {
        height: 100%;
        width: 32.5%;
        background-color: #fff;
        float: left;
        padding: 1rem;
    }

    #message-input:focus {
        outline: none;
    }

    #message-input {
        bottom: 30px;
        width: 100%;
        float: right;
        resize: none;
    }

    .align-right {
        text-align: right;
    }

    .align-left {
        text-align: left;
    }

    .right-col {
        float: right;
        width: 65%;
        float: right"
    }

    #message-list-container{
        height:82vh;
        background-color:#fff;
        padding-top: 1rem;
        overflow-y:auto;
        margin-bottom:2rem;
        padding:1rem
    }

    .msg-paragraph {
        font-weight: 600;
        margin-bottom: 0;
    }

    .msg-note {
        font-weight: 500;
        font-size: .6rem;
    }
</style>

<div class="bacground">
    <div class="custom-container">
        <div class="container-shadow" id="roomlist">
            @if (Rooms != null)
            {
                foreach (var room in Rooms)
                {
                    var isActiveRoom = room.RoomId == ActiveRoom?.RoomId;

                    <div class='roomlist-item @(isActiveRoom ? "roomlist-item-active" : "")' @onclick="@(() => ChangeActiveRoom(room.RoomId))">
                        @room.Title
                    </div>
                    <hr />
                }
            }
        </div>
        @if (ActiveRoom != null)
        {
    <div class="right-col">
        <div id="message-list-container" class="container-shadow">
            @if (ActiveRoom.Messages != null)
            {

                foreach (var message in simpleMessages)

                {
                    if (message.SenderEmail != User.Email)
                    {
                        <div style="padding-left:1.5rem; padding-right:3rem;">
                            <p class="align-right msg-paragraph">@message.Text</p>
                            <p class="align-right msg-note">@message.SenderEmail<span> | </span><span style="color:#2d56bd">@message.Sent</span></p>
                        </div>
                    }
                    else
                    {
                        <div style="padding-left:3rem; padding-right:1.5rem;">
                            <p class="msg-paragraph">@message.Text</p>
                            <p class="msg-note">@message.SenderEmail<span> | </span><span style="color:#2d56bd">@message.Sent</span></p>
                        </div>
                    }
                    <hr />
                }
            }
        </div>
        <textarea id="message-input" class="container-shadow" @bind="MessageText" @bind:event="oninput" rows="3" placeholder="Write a message" @onkeydown="@Enter"></textarea>

    </div>
        }

    </div>
</div>



@code{

    public IEnumerable<RoomModel> Rooms { get; set; }

    public RoomModel ActiveRoom { get; set; }
    public List<SimpleMessage> simpleMessages  { get; set; }


    public string MessageText { get; set; }

    public ApplicationUser User { get; set; }

    public HubConnection _hubConnection;

    public bool IsAuthorizedUser { get; set; }

    public int Page { get; set; }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        User = await State.GetAuthenticatedUser();
        if (User == null)
        {
            NavigationManager.NavigateTo("/notauthorized");
            return;
        }

        _hubConnection = new HubConnectionBuilder().WithUrl($"{NavigationManager.BaseUri}ChatHub").Build();
        _hubConnection.On<SimpleMessage>("ReceiveMessage", this.ReceiveMessage);
        await _hubConnection.StartAsync();

        Rooms = await RoomStore.GetRoomsByUserId(User.Id);
        ConnectToChatHub();

    }

    public Task ReceiveMessage(SimpleMessage message)
    {

        simpleMessages.Add(message);
        StateHasChanged();
        return Task.CompletedTask;
    }

    async Task SendMessage(string text)
    {
        var message = new SimpleMessage
        {
            Sent = DateTime.Now,
            Text = text,
            SenderEmail = User.Email
        };

        await _hubConnection.SendAsync("SendMessageToGroup", ActiveRoom.RoomId.ToString(), message);
    }


    public async Task ConnectToChatHub()
    {
        if (Rooms != null)
        {
            foreach (var room in Rooms)
                await _hubConnection.SendAsync("JoinGroup", room.RoomId.ToString());
        }

    }

    public async Task ChangeActiveRoom(int roomId)
    {
        IsAuthorizedUser = User == null
            ? false
            : await RoomStore.IsUserInRoom(User.Id, roomId);

        if (!IsAuthorizedUser)
        {
            return;
            NavigationManager.NavigateTo("/notauthorized");
        }

        ActiveRoom = await RoomStore.FindRoomById(roomId);
        ActiveRoom.Messages = await RoomStore.GetMessagePageInRoom(roomId, 0);
        simpleMessages = ActiveRoom.GetSimpleMessages();
    }

    public async Task Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            if (!string.IsNullOrEmpty(MessageText))
            {

                IsAuthorizedUser = User == null
                    ? false
                    : await RoomStore.IsUserInRoom(User.Id, ActiveRoom.RoomId);

                if (IsAuthorizedUser)
                {
                    var message = new Message
                    {
                        Text = MessageText,
                        UserId = User.Id,
                        RoomId = ActiveRoom.RoomId
                    };

                    var res = await RoomStore.InsertMessage(message);
                    if (res != 0)
                    {
                        await SendMessage(message.Text);
                        MessageText = "";
                        Page = 0;
                        ActiveRoom.Messages = await RoomStore.GetMessagePageInRoom(ActiveRoom.RoomId, Page);
                    }
                }


            }
        }
    }


}
