@page "/"
@using System.Text
@using Sharpsy.Library.Models
@using System.Text.Json
@using System.Security.Claims
@using Sharpsy.DataAccess.Stores
@using Sharpsy.App.Services
@using Sharpsy.App.Components
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IStorage RoomStore
@inject UserManager<ApplicationUser> UserManager
@inject State State
@implements IDisposable
@inject IJSRuntime JSRuntime


<div class="bacground">

    <SignoutComponent></SignoutComponent>

    <div class="custom-container">

        <div class="container-shadow" id="roomlist">
            @if (Rooms != null)
            {
                foreach (var room in Rooms)
                {
                    var isActiveRoom = room.RoomId == ActiveRoom?.RoomId;
                    var hasMissedNotification = room.NotificationMessage != null;

                    <div class='roomlist-item @(isActiveRoom ? "roomlist-item-active" : "") @(hasMissedNotification ? "missed-notification" : "")' @onclick="@(() => ChangeActiveRoom(room.RoomId))">
                        <span>
                            @room.Title

                            @if (hasMissedNotification)
                            {
                                <span style="margin-left:.5rem" class="notification-circle"></span>
                            }
                        </span>
                        @if (hasMissedNotification)
                        {
                            <div style="font-size:.9rem;">
                                <span style="font-weight:600;">@room.NotificationMessage.SenderEmail</span>
                                <span style="font-weight:500;"> - </span>
                                <span style="font-weight:500;">

                                    @if (room.NotificationMessage.Text.Length > 150)
                                    {
                                        @room.NotificationMessage.Text.Substring(0, 150)
                                        <span>...</span>
                                    }
                                    else
                                    {
                                        @room.NotificationMessage.Text
                                    }
                                </span>
                            </div>
                        }
                    </div>
                    <hr />
                }
            }

            @if (!isViewingRoomForm)
            {
                <div class="roomlist-item">
                    <span @onclick="TogglePersistRoomForm">
                        <i class="fa fa-plus"></i>
                    </span>
                </div>
            }
            else
            {
                <PersistRoomForm></PersistRoomForm>
            }




        </div>

        @if (ActiveRoom != null)
        {
            <div class="right-col">
                <div id="message-list-container" class="container-shadow">
                    @if (ActiveRoom.Messages != null)
                    {

                        foreach (var message in simpleMessages)

                        {
                            if (message.SenderEmail != User.Email)
                            {
                                <div class="left-msg-container">
                                    <p class="msg-paragraph">@message.Text</p>
                                    <p class="msg-note">
                                        @if (onlineUsers.Contains(message.UserId))
                                        {
                                            <span class="loggedin-circle"></span>
                                        }
                                        else
                                        {
                                            <span class="loggedout-circle"></span>
                                        }
                                        @message.SenderEmail
                                        <span> | </span>
                                        <span style="color:#2d56bd">@message.Sent.ToString("yyyy-MM-dd HH:mm")</span>

                                    </p>
                                </div>


                            }
                            else
                            {
                                <div class="right-msg-container">
                                    <p class="align-right msg-paragraph">@message.Text</p>
                                    <p class="align-right msg-note">
                                        @if (onlineUsers.Contains(message.UserId))
                                        {
                                            <span class="loggedin-circle"></span>
                                        }
                                        else
                                        {
                                            <span class="loggedout-circle"></span>
                                        }
                                        @message.SenderEmail
                                        <span> | </span>
                                        <span style="color:#2d56bd">@message.Sent.ToString("yyyy-MM-dd HH:mm")</span>
                                    </p>
                                </div>
                            }
                            <hr />
                        }
                    }
                </div>
                <textarea id="message-input" class="container-shadow" @bind="MessageText" @bind:event="oninput" rows="3" placeholder="Write a message" @onkeydown="@Enter"></textarea>

            </div>
        }

    </div>
</div>



@code{

    public IEnumerable<RoomModel> Rooms { get; set; }

    public RoomModel ActiveRoom { get; set; }
    public List<SimpleMessage> simpleMessages { get; set; }


    public string MessageText { get; set; }

    public ApplicationUser User { get; set; }

    public HubConnection _hubConnection;

    public bool IsAuthorizedUser { get; set; }

    public int Page { get; set; }

    public bool isViewingRoomForm { get; set; }

    public List<int> onlineUsers { get; set; } = new List<int>();

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        User = await State.GetAuthenticatedUser();
        if (User == null)
        {
            NavigationManager.NavigateTo("/notauthorized");
            return;
        }

        _hubConnection = new HubConnectionBuilder().WithUrl($"{NavigationManager.BaseUri}ChatHub").Build();
        _hubConnection.On<SimpleMessage>("ReceiveMessage", this.ReceiveMessage);
        _hubConnection.On("TellClientTopUppdateActiveList", this.TellClientTopUppdateActiveList);
        _hubConnection.On<List<int>>("ReciveActiveList", this.ReciveActiveList);
        await _hubConnection.StartAsync();


        Rooms = await RoomStore.GetRoomsByUserId(User.Id);
        await ConnectToChatHub();

        PersistRoomForm.OnClosingForm += () =>
        {
            TogglePersistRoomForm();
        };

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }

    public Task ReceiveMessage(SimpleMessage message)
    {
        var isMessageFromActiveRoom = ActiveRoom != null && ActiveRoom.RoomId == message.RoomId;
        if (isMessageFromActiveRoom)
        {
            simpleMessages.Add(message);
            StateHasChanged();
        }
        else
        {
            var roomToNotify = Rooms
                .Where(room => room.RoomId == message.RoomId)
                .FirstOrDefault();

            roomToNotify.NotificationMessage = message;
            StateHasChanged();
        }

        return Task.CompletedTask;
    }


    public async Task TellClientTopUppdateActiveList()
    {

        var x = Rooms.SelectMany(u => u.Members).Select(m => m.Id);
        await _hubConnection.SendAsync("GetActiveUserList", x);

    }

    public async Task ReciveActiveList(List<int> l)
    {
        onlineUsers = l;
        StateHasChanged();
    }


    async Task SendMessage(string text)
    {
        var message = new SimpleMessage
        {
            Sent = DateTime.Now,
            Text = text,
            SenderEmail = User.Email,
            RoomId = ActiveRoom.RoomId,
            UserId = User.Id
        };

        await _hubConnection.SendAsync("SendMessageToGroup", ActiveRoom.RoomId.ToString(), message);
    }

    public async Task ConnectToChatHub()
    {
        if (Rooms != null)
        {
            var allUserRooms = Rooms.Select(x => x.RoomId).ToList();

            foreach (var room in Rooms)
                await _hubConnection.SendAsync("JoinGroup", room.RoomId.ToString(), User.Id, allUserRooms);
        }

    }

    public async Task ChangeActiveRoom(int roomId)
    {
        IsAuthorizedUser = User == null
            ? false
            : await RoomStore.IsUserInRoom(User.Id, roomId);

        if (!IsAuthorizedUser)
        {
            NavigationManager.NavigateTo("/notauthorized");
            return;
        }

        ActiveRoom = await RoomStore.FindRoomById(roomId);

        var r = Rooms.Where(r => r.RoomId == roomId).FirstOrDefault();
        r.NotificationMessage = null;

        ActiveRoom.Messages = await RoomStore.GetMessagePageInRoom(roomId, 0);
        simpleMessages = ActiveRoom.GetSimpleMessages();
        StateHasChanged();

        await JSRuntime.InvokeVoidAsync("scrollToBottom");

        var x = Rooms.SelectMany(u => u.Members).Select(m => m.Id);
        await _hubConnection.SendAsync("GetActiveUserList", x);
    }

    public async Task Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            if (!string.IsNullOrEmpty(MessageText))
            {

                IsAuthorizedUser = User == null
                    ? false
                    : await RoomStore.IsUserInRoom(User.Id, ActiveRoom.RoomId);

                if (IsAuthorizedUser)
                {
                    var message = new Message
                    {
                        Text = MessageText,
                        UserId = User.Id,
                        RoomId = ActiveRoom.RoomId
                    };

                    var res = await RoomStore.InsertMessage(message);
                    if (res != 0)
                    {
                        await SendMessage(message.Text);
                        MessageText = "";
                        Page = 0;
                        ActiveRoom.Messages = await RoomStore.GetMessagePageInRoom(ActiveRoom.RoomId, Page);
                    }
                }
            }
        }
    }

    public void TogglePersistRoomForm()
    {
        isViewingRoomForm = isViewingRoomForm ? false : true;
        StateHasChanged();
    }

    public void Dispose()
    {
        _hubConnection.DisposeAsync();
    }
}
