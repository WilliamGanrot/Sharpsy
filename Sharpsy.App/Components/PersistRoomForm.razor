@page "/create"
@using Sharpsy.Library.Models
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity;
@using Sharpsy.DataAccess.Stores
@using Sharpsy.App.Services
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IStorage RoomStore
@inject UserManager<ApplicationUser> UserManager
@inject State State

<span style="cursor:pointer" @onclick="CloseForm">
    <i class="fa fa-times"></i>
</span>
<EditForm style=" display: flex;" Model="@room" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText style=" width: 100%; margin-right: 1rem; border: 2px #555555 solid;" id="title" @bind-Value="room.Title" />

    <button style="font-size:large;background: transparent; box-shadow: none; border: 2px #555555 solid; padding-top: .2rem; padding-bottom: .2rem; padding-left: .7rem; padding-right: .7rem;" type="submit">Submit</button>
</EditForm>

@code {
    private RoomModel room = new RoomModel();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var user = await State.GetAuthenticatedUser();

        if (user == null)
        {
            NavigationManager.NavigateTo("/notauthorized");
            return;
        }
    }

    public void CloseForm()
    {
        OnClosingForm.Invoke();
    }

    private async Task HandleValidSubmit()
    {
        var user = await State.GetAuthenticatedUser();
        room.CreatorId = user.Id;

        await RoomStore.CreateRoom(room);
        CloseForm();
        room = new RoomModel();
    }

    public static event Action OnClosingForm = () => { };

}
